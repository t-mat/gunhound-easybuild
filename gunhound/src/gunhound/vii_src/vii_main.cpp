//---------------------------------------------------------------
//
//　VII
//
//　Game Girl Advance Kernel (c)ragi.
//
//---------------------------------------------------------------

#include <gunvalken.h>
#include <gxLib/util/gxImage/CGXImage.h>

//---------------------------------------------------------------
//関数プロトタイプ
//---------------------------------------------------------------
void gameinit();
void gamemain();
void gameend();

//---------------------------------------------------------------
//関数
//---------------------------------------------------------------

CGameManager::CGameManager()
{

}

void CGameManager::init()
{
	//---------------------------------------------------------------
	//ゲーム初期化（実体）
	//---------------------------------------------------------------
	stop_all_ = gxFalse;
	QuakeFlag = gxFalse;
	m_sNextSeq = 0;
	m_sQuakeTime = 0;
	m_sSuiheisen = 0;
	m_sScopeType = 0;
	m_bGameStart = gxFalse;

	m_bMissionClear  = gxFalse;
	m_bMissionFailed = gxFalse;

	m_sWorldTimer = 0;

	//-------------------------------------------------------------------
	viiDbg::log("オブジェクトアクションマネージャを生成します。");
	//-------------------------------------------------------------------
	//g_pActManager = new CActManager();
	CActManager::GetInstance();

	//-------------------------------------------------------------------
	viiDbg::log("新・当たり判定マネージャを初期化します。");
	//-------------------------------------------------------------------
	pHitManager = new CHitManager();

	//-------------------------------------------------------------------
	viiDbg::log("背景マネージャを生成します。");
	//-------------------------------------------------------------------
	pBg = new CBackGround();

	//-------------------------------------------------------------------
	viiDbg::log("エフェクトマネージャを生成します。");
	//-------------------------------------------------------------------
	//エフェクト・敵（歩かないヤツ）などのオブジェクトを設定
	pEffManager = new CEffManager();


#ifdef GUNHOUND
	m_pPlayerHound = new CGunHound( 0 , 0 ,gxTrue );
#else
	pAsmgr = new CAssaultManager();
	//ジェイ久のセット
	CAssault *p = pAsmgr->set_assault(ASTYPE_GUNVALKEN_JQ);
#endif

	//-------------------------------------------------------------------
	viiDbg::log("ステージマネージャを初期化しました。");
	//-------------------------------------------------------------------
	pStage = new CStage( g_StGameInfo.PlayStage );
	QuakeOff();

//	//-------------------------------------------------------------------
//	viiDbg::log("システムマネージャを初期化しました。");
//	//-------------------------------------------------------------------

	power_x = power_y    = 0;
	gravitation          = gxTrue;
	outflag              = gxFalse;
	bAutoDetectUnderLine = gxTrue;

}


CGameManager::~CGameManager()
{
	//---------------------------------------------------------------
	//ゲーム終了サブクラス破棄
	//（ステージ終了時にも一度破棄して構築しなおします。）
	//---------------------------------------------------------------

	//-------------------------------------------------------------------
	viiDbg::log("システムマネージャを破棄しました。");
	//-------------------------------------------------------------------

	//-------------------------------------------------------------------
	viiDbg::log("ステージマネージャを破棄しました。");
	//-------------------------------------------------------------------
	delete pStage;

	//-------------------------------------------------------------------
	viiDbg::log("背景マネージャを破棄しました。");
	//-------------------------------------------------------------------
	delete pBg;

	//-------------------------------------------------------------------
	viiDbg::log("エフェクトマネージャを破棄しました。");
	//-------------------------------------------------------------------
	delete pEffManager;

	CActManager::DeleteInstance();//if(g_pActManager)	delete g_pActManager;
	//g_pActManager = NULL;

	//-------------------------------------------------------------------
	viiDbg::log("当たり判定マネージャを破棄しました。(FILO注意)");
	//-------------------------------------------------------------------
	delete pHitManager;

	CGXImage::DeleteInstance();

}

void CGameManager::action()
{
	//---------------------------------------------------------------
	//ゲームメインループ中の１シーケンス
	//---------------------------------------------------------------

	pHitManager->init();
	pStage->action();

#ifdef GUNHOUND

#else
	if(pAsmgr) pAsmgr->action();
#endif

	pEffManager->action();
	pBg->action();

	//やられていたら
	if(outflag)
	{
		//フェードアウト待ち
		if(!CFadeManager::GetInstance()->is_fade())
		{
			GameSeq = GSEQ_CONTINUE;	//ゲーム終了
		}
	}

	if( m_sQuakeTime > 0)
	{
		m_sQuakeTime --;
	}

	m_sWorldTimer ++;
}


Sint32 CGameManager::GetNextSeq()
{
	//---------------------------------------------------------------
	//ゲームクリア後の次のシーケンスを得る
	//---------------------------------------------------------------

	return m_sNextSeq;
}

void CGameManager::stage_clear(Sint32 sNextSeq)
{
	//---------------------------------------------------------------
	//ステージクリアを通知
	//---------------------------------------------------------------
	m_sNextSeq = sNextSeq;

//	GameSeq = GSEQ_STAGECLEAR;
	m_bMissionClear = gxTrue;
}


void CGameManager::player_out()
{
	//---------------------------------------------------------------
	//プレイヤーアウト
	//---------------------------------------------------------------

	if(outflag == gxFalse)
	{
		viiMus::PlaySound(SE_PLAYEROUT);
		CFadeManager::GetInstance()->set_fadeout(1,0xffffffff);
		outflag = gxTrue;
	}
}


